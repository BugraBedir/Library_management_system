/**
 * Binary Search Tree Project.
 * @author Bugra Bedir Durmus
 * This prject will be used for inserting and reading data on the binary
 * search tree structure.
 */
import java.util.Scanner;
import java.io.*;
public class main {
    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File("C:\\Users\\90551\\Desktop\\random_data.csv"));
        sc.useDelimiter(",");
        Tree_Name_Surname tree=new Tree_Name_Surname();
        while (sc.hasNext())
        {
              int id =sc.nextInt();
              String name=sc.next();
              String surname=sc.next();
              int age= sc.nextInt();
              double gpa=sc.nextDouble();
            Student st=new Student(id,name,surname,age,gpa);
            Tree_Name_Node node=new Tree_Name_Node(st.Name_and_Surname());

        }
        sc.close();
    }
}
/**
 * BST for storing ID of the student.
 */
public class Tree_ID {
    final static int LEFT = 0;
    final static int RIGHT = 1;

    protected Tree_Node root;

    public Tree_ID(){
        root = null;
    }

    public Tree_Node getRoot(){
        return root;
    }

    public void setRoot(Tree_Node root){
        this.root = root;
    }

}
/**
 * Name Node for storing the data of name and surname.
 */
public class Tree_Name_Node {
    protected Tree_Name_Node left;
    protected Tree_Name_Node right;
    protected String data;

    public Tree_Name_Node(String data){
        this.data = data;
        this.left = null;
        this.right = null;
    }

    public Tree_Name_Node getLeft(){
        return left;
    }

    public Tree_Name_Node getRight(){
        return right;
    }

    public String getData(){
        return data;
    }

    public void setLeft(Tree_Name_Node left){
        this.left = left;
    }

    public void setRight(Tree_Name_Node right){
        this.right = right;
    }
     public void recursiveInsert(Tree_Name_Node node){

        if (node.getData().compareTo(this.data) < 0) {
            if (this.left == null) {
                this.left = node;
            } else {
                this.left.recursiveInsert(node);
            }
        } else if (node.getData().compareTo(this.data) > 0) {
            if (this.right == null) {
                this.right = node;
            } else {
                this.right.recursiveInsert(node);
            }
        }
    }

}
public class Student {
    int ID;
    String Name;
    String Surname;
    int Age;
    Double Real;

    public int getID() {
        return ID;
    }

    public void setID(int ID) {
        this.ID = ID;
    }

    public String getName() {
        return Name;
    }

    public void setName(String name) {
        Name = name;
    }

    public String getSurname() {
        return Surname;
    }

    public void setSurname(String surname) {
        Surname = surname;
    }

    public int getAge() {
        return Age;
    }

    public void setAge(int age) {
        Age = age;
    }

    public Double getReal() {
        return Real;
    }

    public void setReal(Double real) {
        Real = real;
    }
    public String Name_and_Surname(){
        return getName()+" "+getSurname();
    }

    public Student(int ID, String Name, String Surname, int Age, Double Real){
        this.ID=ID;
        this.Name=Name;
        this.Surname=Surname;
        this.Age=Age;
        this.Real=Real;
    }

}
/**
    Node for storing integer data.
 */
public class Tree_Node {
    protected Tree_Node left;
    protected Tree_Node right;
    protected int data;

    public Tree_Node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
    }

    public Tree_Node getLeft(){
        return left;
    }

    public Tree_Node getRight(){
        return right;
    }

    public int getData(){
        return data;
    }

    public void setLeft(Tree_Node left){
        this.left = left;
    }

    public void setRight(Tree_Node right){
        this.right = right;
    }
    public void recursiveInsert(Tree_Node node) {
        if (node.getData() < data) {
            if (left != null) {
                left.recursiveInsert(node);
            } else {
                left = node;
            }
        } else {
            if (right != null) {
                right.recursiveInsert(node);
            } else {
                right = node;
            }
        }
    }
}
/**
 * BST for name and surname
 */
public class Tree_Name_Surname {
    final static int LEFT = 0;
    final static int RIGHT = 1;

    protected Tree_Name_Node root;

    public Tree_Name_Surname(){
        root = null;
    }

    public Tree_Name_Node getRoot(){
        return root;
    }

    public void setRoot(Tree_Name_Node root){
        this.root = root;
    }

}
